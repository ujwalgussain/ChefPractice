Trees:

find depth of Tree.

Find maxdepth/mindepth node of tree.

Search Node in a Tree.

Find no of leaf nodes/full nodes/halfnodes in tree

Check if two trees are structurally identical.

Find Diameter/longest path b/w 2 leaves of Tree

Find max no of nodes at any level in a tree

ZigZagTraversal

Find level which has maximum sum.

Find all paths till leaf in the tree.

Give an algorithm for checking the existence of path with given sum

Find sum of all elements in tree

Given two trees, give an algorithm for checking whether they are mirrors of each other.

Give an algorithm for constructing binary tree from given Inorder and Preorder traversals.

Give an algorithm for constructing binary tree from given Inorder and Postorder traversals.

Give an algorithm for printing all the ancestors of a node in a Binary tree.

Give an algorithm for finding LCA (Least Common Ancestor) of two nodes in a Binary Tree.


Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).
The binary search tree is guaranteed to have unique values.
     Example 1:
        Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
        Output: 32
     Example 2:
        Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
        Output: 23
Ans:

    public int rangeSumBST(TreeNode root, int L, int R) {
        if(root == null)return 0;
        if(root.val<L)
            return rangeSumBST(root.right, L, R);
        if(root.val>R)
            return rangeSumBST(root.left, L, R);
        return (root.val + rangeSumBST(root.left, L, R) + rangeSumBST(root.right, L, R));
    }

Ques:
1. BFS vs DFS
2. Inorder/PreOrder/PostOrder w/o recursion
3. Inorder Tree Traversal without recursion and without stack! **** Morris Traversal
4. Lowest Common Ancestor
5. Print Left/Right/Bottom/Top View
6. Clone a Tree with Random Pointers



Q) BFS and DFS in Tree
   BFS - LOT
   DFS - inorder,postorder,preorder;

Q) Inorder w/o recursion
        void inorder()
        {
            if (root == null)
                return;


            Stack<Node> s = new Stack<Node>();
            Node curr = root;

            // traverse the tree
            while (curr != null || s.size() > 0)
            {

                /* Reach the left most Node of the
                curr Node */
                while (curr !=  null)
                {
                    /* place pointer to a tree node on
                       the stack before traversing
                      the node's left subtree */
                    s.push(curr);
                    curr = curr.left;
                }

                /* Current must be NULL at this point */
                curr = s.pop();

                System.out.print(curr.data + " ");

                /* we have visited the node and its
                   left subtree.  Now, it's right
                   subtree's turn */
                curr = curr.right;
            }
        }