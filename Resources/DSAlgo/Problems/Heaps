a_practiceproblems.heaps:
Time Complexity:
    buildHeap -> O(n)
    extract -> 0(log n)
    increase -> 0(log n)
    insert   -> 0(log n)

INSERT(S, x) inserts the element x into the set S, which is equivalent to the operation.
MAXIMUM(S) returns the element of S with the largest key. [1st element of the heap]
EXTRACT-MAX(S) removes and returns the element of S with the largest key.
    HEAP-EXTRACT-MAX(A)
    1 if A.heap-size < 1
    2 error “heap underflow”
    3 max =A[1]
    4 A[1]=A[A.heap-size]
    5 A.heap-size = A.heap-size - 1
    6 MAX-HEAPIFY(A,1)
    7 return max

INCREASE-KEY(S, x, k)
    increases the value of element x’s key to the new value k, which is assumed to be at least as large as x’s current key value.
    Max Heap: [Destabilization in predecessors] [All parents must be greater than children]
        Here we need to heapify backwards, from child to parent until parent<child as there are chances that parent might be lesser than child
                      10                                    15   <--
                    /   \                                 /   \
                   7     5 --> Increase to 15   -->      7     10
                  / \   / \                             / \    / \
                 4  3  2   1                           4  3   2   1
    Min Heap : [Destabilization in successors] [All parents must be lesser than children]
        Here we need to heapify from parent to child as there is a chance that parent is greater than child
                      1                                     1
                    /   \                                 /   \
                   5     10 --> Increase to 50   -->     5     40
                  / \   / \                             / \    / \
                 12  30 20 40                          12 30  20  50  <----



DECREASE KEY :
    MaxHeap : [Destabilization in successors]
        Here we need to heapify from parent to child  there is a chance that parent is greater than child.
                      10                                    15
                    /   \                                 /   \
                   7     5 --> Decrease to 0   -->       7     1
                  / \   / \                             / \    / \
                 4  3  2   1                           4  3   2   0 <---



    Min Heap : [Destabilization in predecessors]
          Here we need to heapify backwards, from child to parent until parent<child as there are chances that parent might be lesser than child
                      1                                     0    <---
                    /   \                                 /   \
                   5     10 --> Decrease to 0   -->     5      1
                  / \   / \                             / \    / \
                 12  30 20 40                          12 30  20  40


Questions:
    Build a min/max heap
    extractMin/extractMax
    increase/DecreaseKey

    Check if a array represents min heap or not - src/a_practiceproblems/heaps/problems/CheckIfMinHeapOrNot.java

    Convert maxheap to minHeap or vice versa- Same as converting an unsorted array to heap

    Kth Largest elem -
        Use MinHeap for 1st k elems For each ele x if x < root then replace and heapify

    Kth Smallest elem -
        Use MaxHeap for 1st k elems For each ele x if x > root then replace and heapify


    Connect `n` ropes with minimal cost
        Given n ropes of different lengths, connect them into a single rope with minimum cost. Assume that the cost to connect two ropes is the same as the sum of their lengths.
        The idea is to connect the two lowest-cost ropes first.
        The resultant rope has a cost equal to the sum of the connected ropes.
        Repeat the process (with resultant rope included) until we are left with a single rope.
        At each iteration of the loop, we will be left with one less rope and the optimal cost is added to the total cost.
        The final cost for connecting  ropes will be minimal among all possible combinations.
        A priority queue implemented using min-heap is best suited for this problem.

        Ex:
            Input:  [5, 4, 2, 8]

            Output: The minimum cost is 36

            [5, 4, 2, 8] –> First, connect ropes of lengths 4 and 2 that will cost 6.
            [5, 6, 8]    –> Next, connect ropes of lengths 5 and 6 that will cost 11.
            [11, 8]      –> Finally, connect the remaining two ropes that will cost 19.

            Therefore, the total cost for connecting all ropes is 6 + 11 + 19 = 36.