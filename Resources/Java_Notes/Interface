Interface:
    1.All interface methods are implicitly public and abstract.(After Java8 static & default)
    2. All variables defined in an interface must be public, static, and final.(constants)
    3. Interface methods must not be static.
    4. Because interface methods are abstract, they cannot be marked final,strictfp, or native. (More on these modifiers later.)
    5. An interface can extend one or more other interfaces. ***********
    6. An interface cannot extend anything but another interface.
    7. An interface cannot implement another interface or class.
    8. An interface must be declared with the keyword interface.
    9. Interface types can be used polymorphically

The following is a legal interface declaration:
        public abstract interface Rollable { }

------------------------------------------------------------------------------------------
Diamond problem with default keyword:
interface A{
    default public void m1()
    {
        System.out.println("JavaInterviewQuestionsImpl.A.m1()");
    }
}
interface B{
    default public void m1()
    {
        System.out.println("JavaInterviewQuestionsImpl.B.m1()");
    }
}
class C implements A,B
{
    //This will throw a compilation Error as m1 is present in both A,B.
    Hence we will need to provide a implementation for m1() in C as well
}
 ***Note: Diamond problem doesnt arise in the following scenarios:
    Case 1: if A's m1() is default and B's m1() is static
    Case 2: If both A's and B's m1() is static or abstract.

Hence we can say that Diamond problem arises only with default keyword.
------------------------------------------------------------------------------
interface MyInterface1{
   public static int num = 100;
   public default void display() {
      System.out.println("display method of MyInterface1");
   }
}
interface MyInterface2{
   public static int num = 1000;
   public default void display() {
      System.out.println("display method of MyInterface2");
   }
}
public class InterfaceExample implements MyInterface1, MyInterface2{
   public void display() {
      MyInterface1.super.display(); //***************
      //or,
      MyInterface2.super.display();//***************************
   }
   public static void main(String args[]) {
      InterfaceExample obj = new InterfaceExample();
      obj.display();
   }
}

JAVA 8:
Why do we need static methods in interface?
Ref: https://www.baeldung.com/java-static-default-methods

static methods don't belong to a particular object, they're not part of the API of the classes implementing the interface;
therefore, they have to be called by using the interface name preceding the method name.

1.  we can’t use it for implementation class objects.
2. Good for providing utility methods, for example null check, collection sorting etc.
3. Helps us in providing security by not allowing implementation classes to override them.
We can’t define interface static method for Object class methods, we will get compiler error as “This static method cannot hide the instance method from Object”.
This is because it’s not allowed in java, since Object is the base class for all the classes and we can’t have one class level static method and
another instance method with same signature.
We can use java interface static methods to remove utility classes such as Collections and move all of it’s static methods to the corresponding interface,
that would be easy to find and use.
    Usage Ex1:
    interface A{
        static int m1(){
            return 1;
        }
    }
    class B implements A{
        public static void main(String[] args) {
            B.m1(); //COMPILER ERROR: Static method may be invoked on containing interface class only
            A.m1(); //CORRECT
        }
    }

    Ex2 : All vehicles have horsepower and formula is also same hence we can define it as static method.
        public interface Vehicle {
             // regular / default interface methods
             static int getHorsePower(int rpm, int torque) {
                 return (rpm * torque) / 5252;
             }
         }