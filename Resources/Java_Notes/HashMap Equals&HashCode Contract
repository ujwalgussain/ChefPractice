What is initial Capacity and load factor of HashMap?
The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the
hash table is created.
The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased.
When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed
(that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.

As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs.
Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the HashMap class, including get and put).
The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity,
so as to minimize the number of rehash operations.
If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur.



Internal Working of HashMap:

What if we override hashCode/equals method?
In both the cases we will end up having DUPLICATE KEYS in hashMap.
with map.get() we will have following cases:
    In Both Cases we if the object which is INSERTED is used as key, we will get the corresponding entry otherwise we will get null.

    If Only HashCode is Overridden then

    Map With HashCode override {[ID-1, Name=Adarsh]=e1, [ID-2, Name=Ujwal]=e2, [ID-2, Name=Ujwal]=e2_duplicate, [ID-2, Name=Ujwal]=e2_clone, [ID-3, Name=Rama]=e3, [ID-4, Name=Dinesh]=e4}

    Same Object as inserted is used then
    	map1.get(e2)-e2
    	map1.get(e2_duplicate) - e2_duplicate
    	map1.get(e2_clone) - e2_clone
    Different Object is used then
    	map1.get(new EmployeeWithHashCode(1,"Ujwal")) - null
    	map1.get((EmployeeWithHashCode) e2.clone()) - null

    If Only Equals is Overridden then

    Map With Equals override {[ID-2, Name=Ujwal]=e2_duplicate, [ID-3, Name=Rama]=e3, [ID-2, Name=Ujwal]=e2, [ID-1, Name=Adarsh]=e1, [ID-2, Name=Ujwal]=e2_clone, [ID-4, Name=Dinesh]=e4}
    Same Object as inserted is used then
    	map1.get(e2) -  e2
    	map1.get(e2_duplicate) - e2_duplicate
    	map1.get(e2_clone) - e2_clone
    Different Object is used then
    	map1.get(new Employee(1,"Ujwal")) -null
    	map1.get((EmployeeWithEquals) e2.clone()) - null
