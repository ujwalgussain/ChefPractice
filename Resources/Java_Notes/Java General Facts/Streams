Streams:
- Streams are lazy. Evaluation is not performed until terminal operation is invoked
- Hence if we invoke a stream without terminal operation it is a no op.
- Always use Streams Judiciously
- refrain from using streams to process char values.
   Ex: "Hello world!".chars().forEach(x -> System.out.print((char) x));-> this will print int and not characters
- while using streams keep this in mind. If a computation is best expressed using these techniques, then it’s probably not a good match for streams.:
    1. From a code block, you can read or modify any local variable in scope;
       From a lambda, you can only read final or effectively final variables [JLS 4.12.4], and you can’t modify any local variables.
    2. From a code block, you can return from the enclosing method, break or continue an enclosing loop, or throw any checked exception that this
         method is declared to throw;
       From a lambda you can do none of these things.

- Always return Collection and not Stream Object from method.
    Because Stream doesn't implement Iterable. But Collection implements both Stream and Iterable

- SHORT CIRCUITING OPERATIONS: anyMatch(), allMatch(), noneMatch()

PARELLEL STREAM :
- For Parellel Streams, use forEachOrdered() instead of forEach() which is guaranteed to traverse parallel streams in encounter order
- Donot parallelize Stream with linear operations like limit() or Stream.iterate() operations.
- Performance gains from parallelism are best on streams over ArrayList, HashMap, HashSet, and ConcurrentHashMap instances;
  arrays; int ranges; and long ranges. because they can be accurately and cheaply split into subranges. This acheived using splitIterator()
- Even if we efficiently using a parellel stream, we would get the performance benefit only if the number of elements in the stream
  times the number of lines of code executed per element should be at least a hundred thousand.
- To parallelize a stream of random numbers, start with a SplittableRandom instance rather than a ThreadLocalRandom (or the
  essentially obsolete Random). SplittableRandom is designed for precisely this use, and has the potential for linear speedup.
  ThreadLocalRandom is designed for use by a single thread, and will adapt itself to function as a parallel stream source, but won’t be as
  fast as SplittableRandom.
  Random synchronizes on every operation, so it will result in excessive, parallelism-killing contention.






Methods:
flatMap()
- to iterate in nested collection like List<List>
- can be imagined as 2 nested for loops for iterating over nested collections



Streams.iterate()
- We can generate Streams using Stream.iterate() :\src\Java_Basics\Streams\GenerateEvenNos.java





Reference :
Joshua Bloch Pg 230
