Type hierarchies are great for organizing some things, but other things donâ€™t fall neatly into a rigid hierarchy.
For example, suppose we have an interface representing a singer and another representing a songwriter:

public interface Singer {
    AudioClip sing(Song s);
}
public interface Songwriter {
    Song compose(int chartPosition);
}
In real life, some singers are also songwriters. Because we used interfaces
rather than abstract classes to define these types, it is perfectly permissible for a
single class to implement both Singer and Songwriter. In fact, we can
define a third interface that extends both Singer and Songwriter and adds
new methods that are appropriate to the combination:

public interface SingerSongwriter extends Singer, Songwriter {
AudioClip strum();
void actSensitive();
}