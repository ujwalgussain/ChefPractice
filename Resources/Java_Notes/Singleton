Ways to make a Singleton Object
1. Create a static final instance
    class Singleton
    {
        public static final Singleton INSTANCE = new Singleton();

        private Singleton()
        {
            ....
        }
    }

2. Create a public static getInstance method
    class Singleton
    {
        static final Singleton INSTANCE = new Singleton();

        private Singleton()
        {
                ....
        }
        public static Singleton getInstance()
        {
            return INSTANCE;
        }
    }

3. Create Enum
    enum Singleton{
        INSTANCE;
    }

PROBLEMS:
Check - src/java_basics/designpatterns/singleton/Singleton.java

The Singleton Property could be destroyed using Reflection, Serialization, Cloning
Overcome reflection issue:
    enum Singleton{
            INSTANCE;
        }

    To overcome issue raised by reflection, enums are used because java ensures internally that enum value is
    instantiated only once.
    Since java Enums are globally accessible, they can be used for singletons.
    Its only drawback is that it is not flexible i.e it does not allow lazy initialization.
    As enums don’t have any constructor so it is not possible for Reflection to utilize it.
    Enums have their by-default constructor, we can’t invoke them by ourself.
    JVM handles the creation and invocation of enum constructors internally.
    As enums don’t give their constructor definition to the program, it is not possible for us to access them by Reflection also.
    Hence, reflection can’t break singleton property in case of enums.
    As enums don’t have any constructor so it is not possible for Reflection to utilize it.
    Enums have their by-default constructor, we can’t invoke them by ourself.
    JVM handles the creation and invocation of enum constructors internally.
    As enums don’t give their constructor definition to the program, it is not possible for us to access them by Reflection also.
    Hence, reflection can’t break singleton property in case of enums.

Overcome Serializable:  Serialization can also cause breakage of singleton property of singleton classes. Serialization is used to convert an object of byte stream and save in a file or send over a network. Suppose you serialize an object of a singleton class. Then if you de-serialize that object it will create a new instance and hence break the singleton pattern.

class Singleton implements Serializable
{
    // public instance initialized when loading the class
    public static Singleton instance = new Singleton();

    private Singleton()
    {
        // private constructor
    }

    // implement readResolve method
    protected Object readResolve()
    {
        return instance;
    }
}

public class GFG
{

    public static void main(String[] args)
    {
        try
        {
            Singleton instance1 = Singleton.instance;
            ObjectOutput out
                = new ObjectOutputStream(new FileOutputStream("file.text"));
            out.writeObject(instance1);
            out.close();

            // deserailize from file to object
            ObjectInput in
                = new ObjectInputStream(new FileInputStream("file.text"));
            Singleton instance2 = (Singleton) in.readObject();
            in.close();

            System.out.println("instance1 hashCode:- "
                                           + instance1.hashCode());
            System.out.println("instance2 hashCode:- "
                                           + instance2.hashCode());
        }

        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}Output:-
 instance1 hashCode:- 1550089733
 instance2 hashCode:- 1550089733


Overcome Cloning issue:-
Solution 1: To overcome this issue, override clone() method and throw an exception from clone method that is CloneNotSupportedException.
Now whenever user will try to create clone of singleton object, it will throw exception and hence our class remains singleton.

Solution 2:  If you don;t want to throw exception you can also return the same instance from clone method.
// JAVA code to explain overcome
// cloning issue with singleton
class SuperClass implements Cloneable {
    int i = 10;

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

// Singleton class
class Singleton extends SuperClass {
    // public instance initialized when loading the class
    public static Singleton instance = new Singleton();

    private Singleton() {
        // private constructor
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }
}

public class GFG {
    public static void main(String[] args) throws CloneNotSupportedException {
        Singleton instance1 = Singleton.instance;
        Singleton instance2 = (Singleton) instance1.clone();
        System.out.println("instance1 hashCode:- " +
            instance1.hashCode());
        System.out.println("instance2 hashCode:- " +
            instance2.hashCode());
    }
}


//