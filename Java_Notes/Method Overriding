Q) Rules for Method Overriding:
   1. Argument types must be same
   2. Return type may be same or subtype(covariant return type)
   3. Access Level may be same or Less Restrictive
   4. Exceptions thrown must be same/narrower(subtypes)
   5. Static/final/private methods cant be overriden.

Q) Overriding with Polymorphic Reference
    class A{
        public void m1() throws Exception
        {
            System.out.println("In A");
        }
    }
    class B extends A{
        public void m1()throws SQLDataException
        {
            System.out.println("In B");
        }
        public void m2()
        {
            System.out.println("m2 B");
        }
    }

    1.  This is allowed. But not vice versa
        A.m1() -> throws Exception
        B.m1() -> throws SQLDataException

    2.  In case of polymorphic reference, it will have access to all methods in superclass and (overridden methods in subclass during runtime)
        B a = new B();
        a.m1(); // this throws SQLDataException
        A poly=new B();
        poly.m1(); // this throws Exception as it resolved to A's m1() during compilation....which will resolve to B's m1() during runtime
        Hence becoz of the subtype/narrower exception you will always have to handle the parent class Exception


