Memory-Amt of memory assigned to program
Throughput- Average time spent running the code vs running GC
Latency- Amount of time code pauses to GC

Hence we want Latency as low as possible and Throughput as high as possible.

Generational Hypothesis: Most objects die young. (Ex local variables)
Hence Heap is split in 2 types:
    Young Gen   -   Minor Collection. Most GC is run here. All Objects first come here and are GCed if they are unused(die young)
    Old Gen     -   Major Collection. Class level variables have longer life. If such variables are not eligible for GC for a long period of time they promoted to Old Gen
                    ie., Objects in young Gen that survived multiple minor collections / If they are too big for younger Gen.
                    Whenever there are lot of objects in Old Gen, Then GC is triggered in Old Gen( A diff GC algo is used ).


Young Gen:
____________________________________
|   Eden Space                      |
|___________________________________|
| survivor space1 | survivor space 2|
-------------------------------------

All new objects comes in Eden space. When minor collections take place, all unused objects from Eden Space are removed and live objects are coped over to survivor spaces.
Stage 1: Mark all Live Objects
Stage 2. Copy all live Objects and Delete Dead Objects

1. Keep allocating in Eden Space.
2. Once full trigger Minor GC
3. Mark All live objects in Eden space
4. Copy all live Objects to Survivor Space1
5. Empty Eden space

1. Keep allocating in Eden Space.
2. Once full trigger Minor GC
3. Mark All live objects in Eden space
4. Copy all live Objects to Survivor Space2
5. Copy live objects of s1 to s2.
6. Empty Eden space & Survivor Space1.

Old Gen:
Mark Sweep and Compact:
1. Keep allocating
2. Once threshold is reached trigger Major GC.
3. Mark all Live Objects.
4. Sweep or Reclaim the dead Objects.
5. Move the live objects together for compaction
Ex:
1   2   3   4   5   6   .......
L   D   L   D   D   L
After compaction
1   3   6 ............
          ptr
Portion to left of ptr is occupied and right is free.


Serial Collector:
Smallest footprint.
Uses single thread for minor and major gc.(Since it is singleThreaded it would allow the applications to run parellely along with GC)
Best for small programs with small memory or shared CPU.

Parellel Collector:
Multiple Threads for Minor and Major GC and hence suitable for batch applications.'
It is possible that it may occupy all threads and not run parellely with the application.
Greatest throughput in multiprocessor system.


CMS(Concurrent Mark and Sweep):
It runs concurrently with application to mark and sweep But may have pause times.
pauses times are smaller as compared to parellel collector
More footprint than parellel collector.
Less Throughput than parellel collector.

G1 Collector:
Uses entire heap and divides into regions( young and old.)
More footprint than CMS
can set pausetime threshold
Lower latency



Garbage Collection (OCA Objective 2.4)
1. In Java, garbage collection (GC) provides automated memory management.
2. The purpose of GC is to delete objects that can’t be reached.
3. Only the JVM decides when to run the GC; you can only suggest it.
4. You can’t know the GC algorithm for sure.
5. Objects must be considered eligible before they can be garbage collected.
6. An object is eligible when no live thread can reach it. -********
7. To reach an object, you must have a live, reachable reference to that object.
8. Java applications can run out of memory.
9. Islands of objects can be garbage collected, even though they refer to each other.
10. Request garbage collection with System.gc();.
11. The Object class has a finalize() method.
12. The finalize() method is guaranteed to run once and only once before the garbage collector deletes an object.
13. The garbage collector makes no guarantees; finalize() may never run.
14. You can ineligible-ize an object for GC from within finalize(). ****