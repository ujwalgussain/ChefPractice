Rules for Constructors:
1. Constructors can use any access modifier, including private.
2. The constructor name must match the name of the class.
3. Constructors must not have a return type.
4. It’s legal (but stupid) to have a method with the same name as the class.
5. If you don’t type a constructor into your class code, a default constructor will be automatically generated by the compiler.
6. The default constructor is ALWAYS a no-arg constructor.
7. If you’ve typed in a constructor with arguments, you won’t have a no-arg constructor unless you typed it in yourself!
8. Every constructor has, as its first statement, either a call to an overloaded constructor (this()) or a call to the superclass constructor (super()), although remember that this call
can be inserted by the compiler.
9. If you do type in a constructor (as opposed to relying on the compiler-generated default constructor), and you do not type in the call to super() or a call to this(), the compiler will
insert a no-arg call to super() for you as the very first statement in the constructor.
10. A call to super() can either be a no-arg call or can include arguments passed to the super constructor.
11. A no-arg constructor is not necessarily the default (that is, compiler-supplied)constructor, although the default constructor is always a no-arg constructor. The default
constructor is the one the compiler provides! Although the default constructor is always a noargconstructor, you’re free to put in your own no-arg constructor.
12. You cannot make a call to an instance method or access an instance variable until after the super constructor runs.
13. Only static variables and methods can be accessed as part of the call to super() or this(). (Example: super(Animal.NAME) is OK, because NAME is declared as a static
variable.)
14. Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
15. Interfaces do not have constructors. Interfaces are not part of an object’s inheritancetree.
16. The only way a constructor can be invoked is from within another constructor. In other words, you can’t write code that actually calls a constructor as follows: